/*
 * HighLoad Cup 2021
 *
 * ## Usage ## List of all custom errors First number is HTTP Status code, second is value of \"code\" field in returned JSON object, text description may or may not match \"message\" field in returned JSON object. - 422.1000: wrong coordinates - 422.1001: wrong depth - 409.1002: no more active licenses allowed - 409.1003: treasure is not digged 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Area struct for Area
type Area struct {
	PosX int32 `json:"posX"`
	PosY int32 `json:"posY"`
	SizeX *int32 `json:"sizeX,omitempty"`
	SizeY *int32 `json:"sizeY,omitempty"`
}

// NewArea instantiates a new Area object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArea(posX int32, posY int32) *Area {
	this := Area{}
	this.PosX = posX
	this.PosY = posY
	return &this
}

// NewAreaWithDefaults instantiates a new Area object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAreaWithDefaults() *Area {
	this := Area{}
	return &this
}

// GetPosX returns the PosX field value
func (o *Area) GetPosX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PosX
}

// GetPosXOk returns a tuple with the PosX field value
// and a boolean to check if the value has been set.
func (o *Area) GetPosXOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PosX, true
}

// SetPosX sets field value
func (o *Area) SetPosX(v int32) {
	o.PosX = v
}

// GetPosY returns the PosY field value
func (o *Area) GetPosY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PosY
}

// GetPosYOk returns a tuple with the PosY field value
// and a boolean to check if the value has been set.
func (o *Area) GetPosYOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PosY, true
}

// SetPosY sets field value
func (o *Area) SetPosY(v int32) {
	o.PosY = v
}

// GetSizeX returns the SizeX field value if set, zero value otherwise.
func (o *Area) GetSizeX() int32 {
	if o == nil || o.SizeX == nil {
		var ret int32
		return ret
	}
	return *o.SizeX
}

// GetSizeXOk returns a tuple with the SizeX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Area) GetSizeXOk() (*int32, bool) {
	if o == nil || o.SizeX == nil {
		return nil, false
	}
	return o.SizeX, true
}

// HasSizeX returns a boolean if a field has been set.
func (o *Area) HasSizeX() bool {
	if o != nil && o.SizeX != nil {
		return true
	}

	return false
}

// SetSizeX gets a reference to the given int32 and assigns it to the SizeX field.
func (o *Area) SetSizeX(v int32) {
	o.SizeX = &v
}

// GetSizeY returns the SizeY field value if set, zero value otherwise.
func (o *Area) GetSizeY() int32 {
	if o == nil || o.SizeY == nil {
		var ret int32
		return ret
	}
	return *o.SizeY
}

// GetSizeYOk returns a tuple with the SizeY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Area) GetSizeYOk() (*int32, bool) {
	if o == nil || o.SizeY == nil {
		return nil, false
	}
	return o.SizeY, true
}

// HasSizeY returns a boolean if a field has been set.
func (o *Area) HasSizeY() bool {
	if o != nil && o.SizeY != nil {
		return true
	}

	return false
}

// SetSizeY gets a reference to the given int32 and assigns it to the SizeY field.
func (o *Area) SetSizeY(v int32) {
	o.SizeY = &v
}

func (o Area) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["posX"] = o.PosX
	}
	if true {
		toSerialize["posY"] = o.PosY
	}
	if o.SizeX != nil {
		toSerialize["sizeX"] = o.SizeX
	}
	if o.SizeY != nil {
		toSerialize["sizeY"] = o.SizeY
	}
	return json.Marshal(toSerialize)
}

type NullableArea struct {
	value *Area
	isSet bool
}

func (v NullableArea) Get() *Area {
	return v.value
}

func (v *NullableArea) Set(val *Area) {
	v.value = val
	v.isSet = true
}

func (v NullableArea) IsSet() bool {
	return v.isSet
}

func (v *NullableArea) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArea(val *Area) *NullableArea {
	return &NullableArea{value: val, isSet: true}
}

func (v NullableArea) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArea) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


