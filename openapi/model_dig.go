/*
 * HighLoad Cup 2021
 *
 * ## Usage ## List of all custom errors First number is HTTP Status code, second is value of \"code\" field in returned JSON object, text description may or may not match \"message\" field in returned JSON object. - 422.1000: wrong coordinates - 422.1001: wrong depth - 409.1002: no more active licenses allowed - 409.1003: treasure is not digged 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Dig struct for Dig
type Dig struct {
	// ID of the license this request is attached to.
	LicenseID int32 `json:"licenseID"`
	PosX int32 `json:"posX"`
	PosY int32 `json:"posY"`
	Depth int32 `json:"depth"`
}

// NewDig instantiates a new Dig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDig(licenseID int32, posX int32, posY int32, depth int32) *Dig {
	this := Dig{}
	this.LicenseID = licenseID
	this.PosX = posX
	this.PosY = posY
	this.Depth = depth
	return &this
}

// NewDigWithDefaults instantiates a new Dig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigWithDefaults() *Dig {
	this := Dig{}
	return &this
}

// GetLicenseID returns the LicenseID field value
func (o *Dig) GetLicenseID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LicenseID
}

// GetLicenseIDOk returns a tuple with the LicenseID field value
// and a boolean to check if the value has been set.
func (o *Dig) GetLicenseIDOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LicenseID, true
}

// SetLicenseID sets field value
func (o *Dig) SetLicenseID(v int32) {
	o.LicenseID = v
}

// GetPosX returns the PosX field value
func (o *Dig) GetPosX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PosX
}

// GetPosXOk returns a tuple with the PosX field value
// and a boolean to check if the value has been set.
func (o *Dig) GetPosXOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PosX, true
}

// SetPosX sets field value
func (o *Dig) SetPosX(v int32) {
	o.PosX = v
}

// GetPosY returns the PosY field value
func (o *Dig) GetPosY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PosY
}

// GetPosYOk returns a tuple with the PosY field value
// and a boolean to check if the value has been set.
func (o *Dig) GetPosYOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PosY, true
}

// SetPosY sets field value
func (o *Dig) SetPosY(v int32) {
	o.PosY = v
}

// GetDepth returns the Depth field value
func (o *Dig) GetDepth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Depth
}

// GetDepthOk returns a tuple with the Depth field value
// and a boolean to check if the value has been set.
func (o *Dig) GetDepthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Depth, true
}

// SetDepth sets field value
func (o *Dig) SetDepth(v int32) {
	o.Depth = v
}

func (o Dig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["licenseID"] = o.LicenseID
	}
	if true {
		toSerialize["posX"] = o.PosX
	}
	if true {
		toSerialize["posY"] = o.PosY
	}
	if true {
		toSerialize["depth"] = o.Depth
	}
	return json.Marshal(toSerialize)
}

type NullableDig struct {
	value *Dig
	isSet bool
}

func (v NullableDig) Get() *Dig {
	return v.value
}

func (v *NullableDig) Set(val *Dig) {
	v.value = val
	v.isSet = true
}

func (v NullableDig) IsSet() bool {
	return v.isSet
}

func (v *NullableDig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDig(val *Dig) *NullableDig {
	return &NullableDig{value: val, isSet: true}
}

func (v NullableDig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


